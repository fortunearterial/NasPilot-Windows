name: V2 Build
on:
  workflow_dispatch:
  schedule:
    - cron: '0 0/4 * * *'

jobs:
  Windows-build:
    permissions:
      contents: write
    runs-on: windows-latest

    steps:
      - name: 版本对比
        run: |
          $response3 = Invoke-WebRequest -Uri https://api.github.com/repos/fortunearterial/NasPilot-Backend/git/refs/heads/v2-develope | ConvertFrom-Json
          $naspilot_version=$response3.object.sha
          echo $naspilot_version

          # 获取所有发布版本
          # $response4 = Invoke-WebRequest -Uri https://api.github.com/repos/fortunearterial/NasPilot-Windows/releases | ConvertFrom-Json
          $response4 = Invoke-WebRequest -Uri https://api.github.com/repos/fortunearterial/NasPilot-Windows/releases/latest | ConvertFrom-Json
          # 筛选出预发布版本
          # $prereleases = $response4 | Where-Object { $_.prerelease -eq $true }
          # 如果存在预发布版本，获取最新的一个
          # if ($prereleases) {
          if ($true) {
             # $response5 = $prereleases | Sort-Object -Property published_at -Descending | Select-Object -First 1
             # 提取tag_name的值
             # $tagName = $response5.tag_name
             $tagName = $response4.tag_name
             echo $tagName
             echo $naspilot_version.Substring(0, 7)
             if ($tagName.contains($naspilot_version.Substring(0, 7))) {
               Write-Output "版本相同,无需更新"
               exit 1
             } else {
               Write-Output "检测到新的commit 执行重新打包"
             }
          } else {
             Write-Host "检测到新的commit 执行重新打包"
          }

      - name: pull exe code
        uses: actions/checkout@v4
        with:
          repository: kira-96/Inno-Setup-Chinese-Simplified-Translation
          ref: main
          path: 'Inno-Setup-NasPilot'
          fetch-depth: 1

      - name: pull server code
        uses: actions/checkout@v4
        with:
          ref: v2-develope
          repository: fortunearterial/NasPilot-Backend
          path: 'NasPilot'
          fetch-depth: 2

      - name: pull config code
        uses: actions/checkout@v4
        with:
          ref: main
          repository: fortunearterial/NasPilot-Windows
          path: 'NasPilot-Windows'
          fetch-depth: 2

      - name: Init Python 3.12.8
        uses: actions/setup-python@v5
        with:
          python-version: '3.12.8'
          cache: 'pip'

      - name: Install dependent packages
        id: INSTALL_PACKAGES
        run: |
          cd NasPilot
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          Remove-Item ".\config\app.env"
          Copy-Item "..\NasPilot-Windows\config\app.env" ".\config\app.env"
          $hash_version=(git log -2 --pretty=format:"%h" | Select-Object -Skip 1)
          $GIT_LOG=(git log -2 --oneline | Select-Object -Last 1)
          echo $GIT_LOG
          echo "KEYM=$GIT_LOG" >> $env:GITHUB_OUTPUT
          echo $hash_version
          echo "HASH_VERSION=$hash_version" >> $env:GITHUB_ENV
          echo $HASH_VERSION
          cat $env:GITHUB_ENV
          cd app/helper
          $extract_url = "https://raw.githubusercontent.com/jxxghp/MoviePilot-Resources/main/resources/sites.cp312-win_amd64.pyd"
          Invoke-WebRequest -URI $extract_url -OutFile "sites.cp312-win_amd64.pyd"
          $extract_url1 = "https://raw.githubusercontent.com/jxxghp/MoviePilot-Resources/main/resources/user.sites.v2.bin"
          Invoke-WebRequest -URI $extract_url1 -OutFile "user.sites.v2.bin"
          cd ../plugins/
          Invoke-WebRequest -Uri "https://github.com/jxxghp/MoviePilot-Plugins/archive/refs/heads/main.zip" -OutFile "MoviePilot-Plugins-main.zip"
          Expand-Archive -Path "MoviePilot-Plugins-main.zip" -DestinationPath "MoviePilot-Plugins-main"
          Move-Item -Path "MoviePilot-Plugins-main/MoviePilot-Plugins-main/plugins.v2/*" -Destination . -Force
          Remove-Item -Path "MoviePilot-Plugins-main.zip"
          Remove-Item -Path "MoviePilot-Plugins-main" -Recurse -Force
          Get-ChildItem -Path . -Recurse -Filter "requirements.txt" | ForEach-Object { pip install -r $_ }

      - name: Download NasPilot Frontend
        run: |
          $FRONTEND_VERSION = Get-Content "./NasPilot/version.py" | Select-String "FRONTEND_VERSION" | ForEach-Object {$_.ToString().Split('=')[1] }
          $APP_VERSION = Get-Content "./NasPilot/version.py" | Select-String "APP_VERSION" | ForEach-Object {$_.ToString().Split('=')[1] }
          # 去除可能存在的单双引号和前后空格
          $FRONTEND_VERSION =$FRONTEND_VERSION.Trim() -replace "'", "" -replace '"', ""
          $APP_VERSION =$APP_VERSION.Trim() -replace "'", "" -replace '"', ""
          # 输出 FRONTEND_VERSION 的值
          echo "FRONTEND_VERSION: $FRONTEND_VERSION"
          echo "APP_VERSION: $APP_VERSION"
          mkdir NasPilot-Frontend
          cd NasPilot-Frontend
          $extract_url = "https://github.com/fortunearterial/NasPilot-Frontend/releases/download/$FRONTEND_VERSION/dist.zip"
          Write-Host "前端 Downloading..."
          # 下载
          Invoke-WebRequest -URI $extract_url -OutFile dist.zip
          dir
          Write-Host "Extracting zip"
          # 解压
          Expand-Archive dist.zip -DestinationPath .
          Move-Item -Path .\dist\* -Destination . -Force
          Remove-Item -Path "dist.zip"
          Remove-Item -Path "dist" -Recurse
          # 提取tag_name的值
          $tagName = $APP_VERSION.Substring(1)
          echo "FIRST_VERSION=$tagName" >> $env:GITHUB_ENV
          dir
          echo ("LATEST_VERSION="+"$tagName.$env:HASH_VERSION") >> $env:GITHUB_ENV
          echo $LATEST_VERSION

      - name: Make Python package
        id: Make_Python_package
        run: |
          echo $env:LATEST_VERSION
          echo "KEY=$env:LATEST_VERSION" >> $env:GITHUB_OUTPUT
          cat $env:GITHUB_OUTPUT
          echo 999
          $python_dir=$(python -c "import os; print(os.path.dirname(os.__file__))")
          $python_root_dir=$python_dir.Substring(0, $python_dir.Length - 4)
          mkdir Python3.11
          cd Python3.11
          cp -r $python_root_dir/* .

      - name: Compile Inno Setup Script
        run: |
          echo 999
          echo ${{ steps.Make_Python_package.outputs.KEY }}
          echo 888
          echo "${{ steps.Make_Python_package.outputs.KEY }}"
          echo 999
          echo $env:LATEST_VERSION
          dir
          Invoke-WebRequest https://jrsoftware.org/download.php/is.exe?site=1 -OutFile is.exe
          Start-Process is.exe -ArgumentList "/VERYSILENT", "/NORETART", "/SP-","/SUPPRESSMSGBOXES","/DIR=C:\Users\runneradmin\AppData\Local\Temp\inno" -NoNewWindow -Wait
          cd Inno-Setup-NasPilot
          Copy-Item -Path ".\ChineseSimplified.isl" -Destination "C:\Users\runneradmin\AppData\Local\Temp\inno\Languages"
          echo $env:FIRST_VERSION
          echo $env:HASH_VERSION
          echo "$env:FIRST_VERSION.$env:HASH_VERSION"
          echo $env:LATEST_VERSION
          # iscc /DAppVersion="$env:FIRST_VERSION.$env:HASH_VERSION" build.iss
          C:\Users\runneradmin\AppData\Local\Temp\inno\iscc "/DMyAppVersion=$env:LATEST_VERSION" build.iss

      - name: Use current time
        run: |
          $currentUtcTime = (Get-Date).ToUniversalTime()
          $shanghaiTimeZone = [System.TimeZoneInfo]::FindSystemTimeZoneById("China Standard Time")
          $shanghaiTime = [System.TimeZoneInfo]::ConvertTimeFromUtc($currentUtcTime, $shanghaiTimeZone)
          $formattedShanghaiTime = $shanghaiTime.ToString("yyyyMMddHHmmss")
          echo "Formatted time in Shanghai: $formattedShanghaiTime"
          echo "SHANGHAI_TIMEZONE=$formattedShanghaiTime" >> $env:GITHUB_ENV

      - name: Create release and upload asset
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ env.FIRST_VERSION }}.${{ env.SHANGHAI_TIMEZONE }}.${{ env.HASH_VERSION }}
          tag_name: ${{ env.FIRST_VERSION }}.${{ env.HASH_VERSION }}
          body: ${{ steps.INSTALL_PACKAGES.outputs.KEYM }}
          draft: false
          prerelease: false
          make_latest: true
          files: ./exe/build/*.exe
